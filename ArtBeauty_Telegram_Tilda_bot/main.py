# main.py
import os
import logging

from typing import Dict, cast
from telegram import Message, Update   # üëà –û–ë–ê –Ω—É–∂–Ω—ã

from dotenv import load_dotenv
from flask import Flask, request, jsonify
from flask_cors import CORS

from functions import (
    consult, looks_like_booking, save_booking_data,
    generate_lead_id, normalize_phone, MASTER_CATEGORIES
)

def msg(update: Update) -> Message:
    # –í PTB message –º–æ–∂–µ—Ç –±—ã—Ç—å None (–Ω–∞–ø—Ä–∏–º–µ—Ä, callback-–∫–Ω–æ–ø–∫–∏),
    # –∞ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∞–ø–¥–µ–π—Ç—ã ‚Äî –∑–Ω–∞—á–∏—Ç —Å–º–µ–ª–æ –∫–∞—Å—Ç—É–µ–º.
    return cast(Message, update.message)

load_dotenv()

# ===== Flask (–≤–µ–±-—á–∞—Ç –¥–ª—è Tilda) =====
app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": os.getenv("CORS_ALLOW_ORIGINS", "*")}})

# –ü—Ä–æ—Å—Ç–µ–π—à–∞—è in-memory —Å–µ—Å—Å–∏—è –ø–æ IP (–¥–µ–º–æ). –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ ‚Äî –∫—É–∫–∏/redis.
WEB_SESSIONS: Dict[str, Dict] = {}

def web_state(key: str) -> Dict:
    if key not in WEB_SESSIONS:
        WEB_SESSIONS[key] = {"step": None, "data": {}}
    return WEB_SESSIONS[key]

@app.post("/webchat")
def webchat():
    body = request.get_json(silent=True) or {}
    text = (body.get("message") or "").strip()
    sid = request.headers.get("X-Forwarded-For", request.remote_addr) or "anon"
    state = web_state(sid)

    # –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –∑–∞–ø–∏—Å—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —à–∞–≥–∏
    if state["step"]:
        return jsonify({"reply": web_booking_flow_step(state, text)})

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–ø–∏—Å–∏
    if looks_like_booking(text):
        state["step"] = "ASK_NAME"
        state["data"] = {"source": "web", "status": "new", "lead_id": generate_lead_id()}
        return jsonify({"reply": "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞–ø–∏—Å—å. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"})

    # –ò–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    return jsonify({"reply": consult(text)})

def web_booking_flow_step(state: Dict, text: str) -> str:
    data = state["data"]
    step = state["step"]

    if step == "ASK_NAME":
        data["client_name"] = text
        state["step"] = "ASK_PHONE"
        return "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 701 000 00 00):"

    if step == "ASK_PHONE":
        data["phone"] = normalize_phone(text)
        state["step"] = "ASK_SERVICE"
        return "–ö–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–Ω–∏–∫—é—Ä/–°—Ç—Ä–∏–∂–∫–∞/–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ)"

    if step == "ASK_SERVICE":
        data["service"] = text
        state["step"] = "ASK_DATE"
        return "–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):"

    if step == "ASK_DATE":
        data["preferred_date"] = text
        state["step"] = "ASK_TIME"
        return "–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:00):"

    if step == "ASK_TIME":
        data["preferred_time"] = text
        state["step"] = "ASK_CATEGORY"
        cats = " / ".join(MASTER_CATEGORIES)
        return f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Å—Ç–µ—Ä–∞: {cats}"

    if step == "ASK_CATEGORY":
        data["master_category"] = text
        state["step"] = "ASK_COMMENTS"
        return "–ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª."

    if step == "ASK_COMMENTS":
        data["comments"] = "" if text.lower() == "–Ω–µ—Ç" else text
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        updated_range = save_booking_data({
            **data,
            "telegram_username": "",
        })
        state["step"] = None
        msg = (
            "–û—Ç–ª–∏—á–Ω–æ! –°–æ—Ö—Ä–∞–Ω—è—é –≤–∞—à—É –∑–∞–ø–∏—Å—å‚Ä¶\n"
            "‚úÖ –ì–æ—Ç–æ–≤–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            f"ID –∑–∞—è–≤–∫–∏: {data.get('lead_id')}"
        )
        return msg

    # fallback
    state["step"] = None
    return "–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"

# ===== Telegram bot (python-telegram-bot 20.x, async) =====
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters,
)

logging.basicConfig(level=logging.getLevelName(os.getenv("LOG_LEVEL", "INFO")))
logger = logging.getLogger("artbeauty")

ASK_NAME, ASK_PHONE, ASK_SERVICE, ASK_DATE, ASK_TIME, ASK_CATEGORY, ASK_COMMENTS = range(7)

def kb_row(options):
    return ReplyKeyboardMarkup([options], resize_keyboard=True, one_time_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data.update({
        "lead_id": generate_lead_id(),
        "source": "telegram",
        "status": "new",
        "telegram_username": ("@"+update.effective_user.username) if update.effective_user and update.effective_user.username else "",
    })
    await msg(update).reply_text(
        "ArtBeauty ‚Äî —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ–º. –•–æ—Ç–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ —Å—Ä–∞–∑—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
        reply_markup=kb_row(["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", "–ó–∞–ø–∏—Å—å"])
    )
    return ASK_NAME


async def handle_first_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").lower()
    if "–∑–∞–ø" in txt:
        await msg(update).reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove()
        )
        return ASK_PHONE

    # –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    answer = consult(update.message.text)
    await msg(update).reply_text(answer)
    await msg(update).reply_text(
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —É—Å–ª—É–≥—É –∏–ª–∏ ¬´—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è¬ª."
    )
    return ASK_NAME


async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["client_name"] = update.message.text.strip()
    await msg(update).reply_text(
        "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +7 701 000 00 00):"
    )
    return ASK_SERVICE


async def ask_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = normalize_phone(update.message.text)
    await msg(update).reply_text(
        "–ö–∞–∫—É—é —É—Å–ª—É–≥—É —Ö–æ—Ç–∏—Ç–µ? (–ú–∞–Ω–∏–∫—é—Ä/–°—Ç—Ä–∏–∂–∫–∞/–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ –∏ —Ç.–¥.)"
    )
    return ASK_DATE


async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["service"] = update.message.text.strip()
    await msg(update).reply_text(
        "–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):"
    )
    return ASK_TIME


async def ask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["preferred_date"] = update.message.text.strip()
    await msg(update).reply_text(
        "–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:00):"
    )
    return ASK_CATEGORY


async def ask_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["preferred_time"] = update.message.text.strip()
    cats = " / ".join(MASTER_CATEGORIES)
    await msg(update).reply_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞—Å—Ç–µ—Ä–∞: {cats}\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é."
    )
    return ASK_COMMENTS


async def ask_comments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["master_category"] = update.message.text.strip()
    await msg(update).reply_text(
        "–ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–ª–∏–Ω–µ/—Ü–≤–µ—Ç—É/–¥–∏–∑–∞–π–Ω—É? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª."
    )
    return ConversationHandler.END


async def finalize(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å "–Ω–µ—Ç")
    txt = (msg(update).text or "").strip()
    context.user_data["comments"] = "" if txt.lower() == "–Ω–µ—Ç" else txt

    payload = {
        "source":            context.user_data.get("source"),
        "client_name":       context.user_data.get("client_name"),
        "phone":             context.user_data.get("phone"),
        "service":           context.user_data.get("service"),
        "preferred_date":    context.user_data.get("preferred_date"),
        "preferred_time":    context.user_data.get("preferred_time"),
        "master_category":   context.user_data.get("master_category"),
        "comments":          context.user_data.get("comments"),
        "status":            context.user_data.get("status"),
        "telegram_username": context.user_data.get("telegram_username"),
        "lead_id":           context.user_data.get("lead_id"),
    }

    try:
        save_booking_data(payload)
        await msg(update).reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è—é –∑–∞–ø–∏—Å—å‚Ä¶\n"
            "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            f"ID: {payload.get('lead_id')}"
        )
    except Exception:
        logger.exception("Sheet append error")
        await msg(update).reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardRemove()
        )
    finally:
        context.user_data.clear()

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await msg(update).reply_text(
        "–û–∫, –æ—Ç–º–µ–Ω—è–µ–º. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ ‚Äî /start",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

def build_tg_app():
    token = cast(str, os.getenv("TELEGRAM_BOT_TOKEN"))

    return Application.builder().token(token).build()

def add_handlers(app: Application):
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_first_choice)
            ],
            ASK_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)
            ],
            ASK_SERVICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_service)
            ],
            ASK_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date)
            ],
            ASK_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_time)
            ],
            ASK_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_category)
            ],
            ASK_COMMENTS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_comments),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    # –§–∏–Ω–∞–ª ‚Äî –ª—é–±–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ ASK_COMMENTS
    app.add_handler(conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, finalize))

if __name__ == "__main__":
    # –°–æ–±–∏—Ä–∞–µ–º Telegram –∏ –Ω–∞–≤–µ—à–∏–≤–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    tg_app = build_tg_app()
    add_handlers(tg_app)

    # Flask –ø–æ–¥–Ω–∏–º–µ–º –≤ —Ñ–æ–Ω–µ
    from threading import Thread
    def run_flask():
          # –≤ –ø–æ—Ç–æ–∫–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º reloader, –∏–Ω–∞—á–µ –ø–∞–¥–∞–µ—Ç —Å "signal only works..."
        app.run(
            host="0.0.0.0", 
            port=8000, 
            debug=True, 
            use_reloader=False, 
            threaded=True)


    Thread(target=run_flask, daemon=True).start()

    # Telegram polling (PTB v21)
    tg_app.run_polling()   # –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤

